1	JAVA là gì ?
-Là ngôn ngữ lập trình hiện tại , bậc cao , hướng đối tượng ,bảo mật và mạnh mẽ và la một flatform
2	JDK, JRE, JVM
-JVM (java virtual Machine ) là một thiết bị trừu tượng (ảo) có thể giúp máy tính chạy các chương trình java 
-JRE (java runtime Environment) được sử dụng để cung cấp môi trường runtime , nó là trình triển khai của JVM ,JRE bao gồm các thư viện 
-JDK (java development kit) bao gồm JRE và các developtment tool
3	Thông dịch, biên dịch khác nhau như thế nào ?
-Biên dịch là dịch mã nguồn từ ngôn ngữ lập trình sang một ngôn ngữ mà máy tính có thể hiểu và thực thi được hay còn gọi là ngôn ngư máy .
-Thông dịch là một loại ngôn ngữ lập trình mà hầu hết các hiện thực của nó thực thi lệnh trực tiếp va tự do ma không cần biên dịch sang ngôn ngữ máy.
4	JAVA là ngôn ngữ thông dịch hay biên dịch ?
-Java là ngôn ngữ vừa thông dịch và biên dịch ide đống vai trò biên dịch còn jvm đống vai trò thông dịch vì java chạy được trên mọi nền tảng mà có JVM
5	Các kiểu dữ liệu trong java, và giá trị mặc định khi khai báo.
-Có 8 kiểu dữ kiệu nguyên thủy : boolean(false) , byte(0) , char('\u0000') , short(0), int(0) , long(0L) , float(0.0F) , double(0.0d)
6	Có bao nhiêu loại mệnh đề if
-Có 4 loại mệnh đề if :
  + mệnh đề if 
  + mệnh đề if lồng nhau
  + mệnh đề if else
  + mệnh đề if else if
7	So sánh if và switch-case
-Switch-case sẽ giúp cấu trúc chương trình rõ ràng và dễ đọc dễ hiểu hơn so với if else 
+if sẽ kiểu tra một biến để thực hiện 100 trường hợp khác nhau còn if else sẽ kiểm tra 100 trường hợp để thực hiện 100 trường hợp khác nhau
8	Khi nào dùng for, while, do-while ?
-For : được sử dụng để lặp một phần của chương trình nhiều lần .Nếu số lần lặp là cố định thì vòng lặp for được khuyến khích để sử dụng 
-While và do While : dùng khi không biết được số lần lặp , nhứng muốn chương trình thực hiện một lần dù chương trình đó sai thì dùng do while 
9	Phân biệt for-i và for-each
-for each là kĩ thuật duyệt mảng khác như các vòng lặp trước , thay vì khai báo hay khởi tạo biến lặp vị trí ,chúng ta sẽ khai báo chung kiểu dữ liệu của mảng 
sử dụng biến đó duyệt các phần tử của mảng mà không lấy vị trí của mỗi phần tử (for(<Kiểu dữ liệu><tên biến>:<tên mảng>){Khối lệnh lập})
-for-i là có thể duyệt theo các chiều khác nhau
-for - in và for-of : duyệt từ đầu mảng đến cuối mảng 
10	Khác nhau giữa while, do-while. Cho ví dụ khi nào dùng ?
-while là xét điều kiện trước rồi mới thực hiện lệnh
-do-while là thực hiện lệnh rồi mới xét điều kiện
11	Break, Continue có tác dụng gì trong mệnh đề lặp ?
-Muốn thoát khỏi vòng lặp thì dùng break
-continue nhảy qua vòng lặp khác khi gặp lệnh continue và thực hiện vòng lặp mới
12	Trình bày các cách khởi tạo một mảng trong JAVA ?
-có 2 cách khởi tạo mảng trong java :
+elementType[] arrayName = new elementType[array Size];
+elementType[] arrayName  = {1,2,3,4....}
+elementType[] arrayName = new elementType[] {1,2,3,4,..}ưq
13	Phần tử của mảng có thể dùng kiểu dữ liệu nào, và có giá trị mặc định là gì ?
-phần tử của mảng có kiểu dữ liệu nguyên thủy hoặc hướng đối tượng
-Khởi tạo thì size có giá trị mặc định là 0
-Int = 0 ; String  = null , float = 0.0
14	OOP là gì ?
-Mô tả hiện thực sự vật ngoài đời sống đưa vào ngôn ngữ lập trình
15	Phân biệt class và object
-Class định nghĩa tất cả các thuộc tính và các phương thức cần thiết của mỗi object
-Mỗi object phải thuộc một class nào đó 
16	Constructor là gì
-Là phương thức để khởi tạo đối tượng có tham số truyền vào hoặc không có tham số truyền vào
17	Cách khai báo constructor và đặc điểm constructor trong JAVA
-public tên contructor() {}
-Đặc điểm : tên của constructor phải giống với tên class 
		+trong class có thể có nhiều constructor
		+ không có kiểu dữ liệu trả về
		+mặc định  nếu không khai báo constructor thì java sẽ cung cấp constructor mặc định không tham số chạy ngầm 
		+có thể gọi hàm tạo khác bằng từ khóa this
		+Nếu khai báo constructor có tham số truyền vào thì constructor mặc định của java sẽ bị mất -> phải tự định nghĩa lại
18	Phân biệt constructor và method
-Constructor : tên giống với tên class
		+ kiểu dữ liệu trả về : không có 
		+Java compiler : Nếu không báo thì java cung cấp ngầm định constructor không đối số
		+Số lần gọi : Gọi một lần khi khởi tạo đối tượng
-Method : tên có thể giống vs tên class hoặc không giống với tên class
		+Kiểu dữ liệu trả về : Phải định nghĩa có hoặc không có kiểu dữ liệu trả về
		+Java compiler : không có cung cấp phương thức mặc định
		+Số lần gọi : có thể được gọi nhiều lần 
19	Tính bao đóng là gì ?Làm sao để thực hiện được tính bao đóng trong java ?
-Là kĩ thuật ẩn giấu thông tin không liên quan và hiển thị ra thông tin liên quan 
-private
20	Tham trị, tham chiếu
-tham trị là truyền giá trị 
+áp dụng cho kiểu dữ liệu nguyên thủy
+giá trị của biến trước và sau khi gọi method là không thay đổi
-tham chiếu là truyền tham chiếu (địa chỉ )
+áp dụng cho kiểu dữ liệu đối tượng (object , String ), biến tham chiếu của array
21	Từ khóa static dùng để làm gì ?
-Khai báo thuộc tính và phương thức của class  không phải của đối tượng
22	Ràng buộc khi sử dụng static
-phương thức static chỉ truy xuất được biến static khác
-phương thức static có thể truy xuất được biến static 
-phương thức bình thường không thể truy xuất được thuộc tính static
-nên dùng static khi : + khi muốn tạo thuộc tính chung cho tất cả các đối tượng
			+ khi muốn xây dựng các lớp tiện ích comman (dùng nhiều chỗ)
			+ để khởi tạo các giá trị static  dùng khối static (static{   })
23	Các loại biến trong JAVA
- biến cục bộ 
- biến toàn cục
24	Trình bày các loại access modifier, và phạm vi truy cập.
-protected :hoạt động ngoài packeg thông qua từ khóa extend (kế thừa)
-private : chỉ dùng được trong class
-default : chỉ dùng trong packeg
-public : dùng ở đâu cũng được trong dự ấn
25	Kế thừa trong JAVA là gì ?
-là sự liên quan giữa hai class với nhau , trong đó có class cha và class con
26	Lớp con kế thừa được những tài sản nào(thuộc tính, phương thức) của lớp cha ?
-khi kế thừa class con  được hưởng tất cả các phương thức và thuộc tính của lớp cha 
27	Lớp Object là gì
-là lớp cha của tất cả các lớp trong java (là lớp cao nhất trong java)
28	Khái niệm đa hình
-là hiện tượng các đối tượng thuộc các lớp khác nhau có thể hiểu cùng một thông điệp theo các cách khác nhau 
29	Phân biệt Overloading  và Overriding 
-overload (nạp chồng) là cơ chế cho phép một lớp có khả năng định nghĩa ra nhiều phương thức có cùng tên nhưng khác tham số truyền vào 
-overriding (ghi đè ) là cơ chế cho phép lớp con định nghĩa lại những phương thức đã được định nghĩa trước đó ở lớp cha nhưng cùng số lượng tham số truyền vào 
với thuộc tính của lớp cha 
30	ép kiểu là gì ? các loại ép kiểu
-là gán giá trị của một biến có kiểu dữ liệu này sang 1 biến có kiểu dữ liệu khác
-có hai loại ép kiểu : + ép kiểu ngâm định và ép kiểu tường minh
+ép kiểu ngầm định diễn ra một cách tự động ngầm định bởi hệ thống 
_Mục đích : mở rộng khả năng lưu trữ mà không làm mất thông tin giá trị ban đầu của biến
+ép kiểu tường minh : không thể ép kiểu tự động được coder phải chỉ rõ kiểu dữ liệu cần ép về qua cú pháp : (Kiểu dữ kiệu cần ép) tên biến
_Mục đích : thu hẹp khả năng lưu trữ có thể mất thông tin giá trị ban đầu của dữ liệu
31	Tính trừu tượng là gì ?
-là khả năng ẩn các chi tiết trình triển khai và chỉ hiển thị tính năng tới người dùng chỉ quan tâm đến kết quả đạt được không quan tâm đến cách nó thực hiện
32	Phân biệt abstract class và interface
-abstract class : -giống class bình thường
		  -khai báo thuộc tính như lớp bình thường (static và non-static , final và non-final)
		  - không hỗ trợ đa kế thừa
		  -có thể có contructor
		  -có thể implement một inteface hoặc nhiều inteface
		  -mối quân hệ kế thừa is-a
		  -thể hiện tính trừu tượng < 100% (vì bên trong abstract class có các thuộc tính và phương thức bth)	
-Interface : không phải class
 	          - chỉ có biến static final(chỉ có hằng số),có chứa abstract method
		  - có hỗ trợ đa kế thừa 
		  - không có contructor
		  - chỉ có thể extend (1)interface (không extend được abstract class , class bình thường) 
		  - mối quan hệ kế thừa has-a , can do
		  - thể hiện tính trừu tượng ~ 100% (vì toàn bộ bên trong interface là abstract class)
33	So sánh Array và ArrayList
-Array :- có kích thước cố định
	- có thể lưu được kiểu dữ liệu nguyên thủy và obj 
	- tốc độ lưu trữ và thao tác nhanh hơn 
	-chỉ có một thuộc tính duy nhất .length
-ArrayList: -kích thước có thể thay đổi
	    - có thể lưu trữ được kiểu dữ liệu obj , đối với kiểu nguyên thủy sẽ được tự động chuyển qua kiểu đối tượng qua cơ chế auto-boxing
	    - tốc độ lưu trữ và thao tác sẽ chậm hơn 
	    - có nhiều phương thức để thao tác (add , get <lấy phần tử theo index> , size<trả về số lượng phần tử> , remove() <remove theo index , theo giá trị phần tử>)
34	So sánh ArrayList và LinkedList
-ArrayList: ưu điểm truy xuất nhanh hơn , nhược điểm thêm sửa xóa lâu
-LinkedList:ưu điểm thêm sửa xóa nhanh hơn, nhược điểm truy xuất chậm hơn
35	Set là gì, các lớp triển khai của Set
-Set là một interface kế thừa collection interface trong java, Set trong java là một collection không thể chứa các phần tử trùng lặp 
-Các lớp triển khai của Set : Hash Set ,Linked Hash Set ,Tree Set
36	Generic là gì
-Là cơ chế sử dụng class như là một tham số (tham số hóa kiểu dữ liệu)
37	Ưu điểm và hạn chế khi dùng generic ?
-Ưu điểm : +Phát hiện ngay thời điểm biên dịch
           +không cần ép kiểu dữ liệu 
	   + xây dựng được các thuật toán tổng quát tái sử dụng mã nguồn
-Hạn chế : + Không thể gọi generic cho kiểu dữ liệu nguyên thủy
	   + Không thể tạo instance cho kiểu dữ liệu generic 
  	   + Không sử dụng static cho generic
 	   + Không thể khởi tạo mảng generic
	   + Không thể Khởi tạo class ngoại lệ cho generic 
38	Stack là gì, các phương thức của stack ?
-Là ngăn xếp của của một cấu trúc dữ liệu danh sách , thêm và lấy phần tử theo quy tắc FILO(first-in / last-out)
-Phương Thức : +push() thềm vào phần tử ở trong cùng của stack
	       +peek() lấy ra phần tử trong cùng của stack nhưng không xóa
		+pop() lấy phần tử trong cùng stack và xóa khỏi stack
		+isEmpty() kiểm tra stack có rỗng không
39	Queue là gì, các class triển khai của queue ?
-Queue là hàng đợi là một cấu trúc dữ liệu danh sách , thêm và lấy phần tử theo quy tắc FIFO
-Các class triển khai : + array deque
			+Priority Queue
			+Linked List
40	Phương thức cơ bản của queue ?
-add(): thêm phần tử vào hàng đợi , true nếu thêm thành công và ném ngoại lệ nếu thêm thất bại 
-offer() : thêm phần tử vào hàng đợi true nếu thêm thành công false nếu thêm thất bại
-remove(): lấy ra phần tử và xóa phần tử ở đầu hàng đợi ,ném ngoại lệ hàng nếu queue bị rỗng
-poll() : lấy ra xóa phần tử ở đầu hàng đợi , return null nếu hàng đợi rỗng
-peek() : lấy ra phần tử ở đầu hàng đợi xem và không xóa
41	So sánh Comparable và Comparator, khi nào dùng  cái nào ?
-giống :
+là các giao diện (interface)
+có thể được sử dụng để sắp xếp các phần tử của colection
-khác :
+comparable : implement interface comparable cho lớp đối tượng cần được so sánh
		+cung cấp phương thức compareTo()để  được sắp xếp phần tử
		+override compareTo()
		+so sánh 1 thuộc  tính
+comparator : không implement interface mà tạo 1 lớp mới đọc lập rồi mới implement comparator
		+cung cấp phương thức compare() để sắp xếp các phần tử
		+override compare()
		+so sánh nhiều thuộc tính 
		+cách tạo lớp mới
42	Map là gì, các class triển khai
-Map là quản lý các phần tử theo kiểu key và value 
-các class triển khai là : hash Map , treeMap,linked Hash Map,sorsted Map
43	Cây nhị phân là gì
-Là cấu trúc  dữ liệu phân cấp thường được sử trong các bài toán tìm kiếm hay các sử lý liên quan đến phân cấp dữ liệu
44	Trình bày các cách duyệt cây nhị phân.
-có 4 cách duyệt cây nhị phân
+inorder : duyệt theo thứ tự cây con trái -> đến node hiện tại -> cây con phải
+postorder : duyệt theo thứ tự cây con trái -> cây con phải -> node hiện tại 
+preorder : duyệt theo thứ tự node hiện tại  -> cây con trái ->cây con phải 
+breath - first : duyệt theo từng level
45	Ngoại lệ (Exception là gì) ?
-là lỗi bất thường xảy ra trong quá trình compile hay runtime mà lập trình viên không thể lường trước được
46	Phân loại Exception
- có hai loại exception :
+erro : là lỗi không sửa được
+Exception : thì có thể sử lý được
47	Phân biệt Error và Exception
-erro : là lỗi không sửa được
-Exception : thì có thể sử lý được
48	Có bao nhiêu cách để xử lý ngoại lệ (handle)
- có hai cách :
+ try/cacth : bắt lỗi
+throw và throws : ném lỗi đi
49	Một số lưu ý khi dùng try-catch
-khi sử dụng try có thể không có hoặc có nhiều khối catch , nhưng chỉ có một khối finaly
- khối finaly luôn được thực thi dù chương trình xảy ra ngoại lệ hoặc không xảy ra ngoại lệ
-các khối catch phải được sắp xếp cụ thể nhất đến chung nhất(từ exception con đến exception cha)
-tại thời điểm xảy ra 1 ngoại lệ thì chỉ có 1 catch