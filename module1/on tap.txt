1.Viết một hàm tính tổng tất cả các số chẵn từ 1 đến 1000. Gợi ý: Bạn có thể dùng toán tử lấy số dư (%) trong bài tập này.
function sum_even_numbers(){
    var sum = 0;
    for (let i=1;i <= 1000 ;i++){
        if(i % 2 ==0){
        sum+=i;
    }
    }
    return sum; 
2.Viết một hàm trả về tổng của tất cả các giá trị trong một mảng. (Ví dụ: [1,2,5] trả về 8, [-5,2,5,12] trả về 14).
function iterArr(arr) {
  var sum = 0;
  for( let i = 0 ; i < arr.length;i++){
    sum += arr[i]
  }
  return sum;
}
3.Viết một hàm trả về tổng của tất cả các số lẻ từ 1 đến 5000. (ví dụ 1 + 3 + 5 + ... + 4997 + 4999).
function sum_odd_5000() {
    var sum = 0;
  for(let i = 1 ;i <= 5000;i ++){
      if( i % 2 !=0 ){
          sum += i;
      }
  }
    return sum; 
4.Cho một mảng với nhiều giá trị, viết một hàm trả về số lớn nhất trong mảng.
function findMax(arr) {
  var max = arr[0];
  for (let i = 0 ; i <arr.length ; i ++){
     if (max <= arr[i]){
         max = arr[i];
     }
  }
  return max;
5.Cho một mảng có nhiều phần tử là các chữ số, viết một hàm trả về giá trị trung bình trong mảng.
function findAvg(arr){
    let avg = 0;
    for(let i =0 ; i <arr.length ; i ++){
        avg += arr[i] / arr.length
    }
    return avg; 
}
6.Viết một hàm trả về một mảng gồm các phần từ là các số lẻ từ 1 đến 50. 
function oddNumbers() {
    var arr = [];
   for(let i = 1 ; i < 50 ; i++){
       if(i%2 !=0){
           arr.push(i);
       }
   }
    return arr; 
}
7.Viết một hàm, truyền vào hai tham số, tham số đầu là một mảng các số nguyên, tham số thứ hai là một số nguyên, Ví dụ tham số thứ nhất arr = [1, 3, 5, 7], tham số thứ 2 Y = 3, hàm sẽ trả về giá trị là 2. Vì có hai số nguyên trong mảng lớn hơn 3 là 5 và 7.
   function greaterY(arr, Y) {
    let count = 0;
    for(let i = 0 ;i <arr.length;i++){
        if(arr[i] >Y){
            count++ ;
        }
    }
    return count; 
}
8.Cho một mảng với nhiều phần tử, hãy viết một hàm để thay thế mỗi phần tử trong mảng bằng một phần tử có giá trị bằng bình phương của giá trị ban đầu.
function squareVal(arr) {
    for(let i = 0 ; i < arr.length ; i++){
        if(arr[i] = arr[i]* arr[i]){
            arr[i];
        }
    }
    return arr; 
}
9.Cho một mảng nhiều phần tử, hãy viết một hàm có chức năng thay thế các phần tử có giá trị âm (nhỏ hơn 0) trong mảng bằng môt phần tử có giá trị bằng 0. Khi chương trình được thực hiện, mảng sẽ không còn phần tử có giá trị âm.
function noNeg(arr) {
    for(let i = 0; i < arr.length ; i++){
        if(arr[i] < 0){
            arr[i]=0;
        }
    }
    return arr; 
}
10.Cho một mảng với nhiều phần tử, viết một hàm trả về một mảng mới mà chỉ 3 phần tử có các giá trị : lớn nhất, nhỏ nhất, giá trị trung bình của mảng ban đầu.
function maxMinAvg(arr) {
    let arrnew = [];
    let min = arr[0];
    let max = arr[0];
    let avg = 0;
    for(let i = 0 ; i < arr.length ; i++){
        if(arr[i] > max){
            max = arr[i];
    
        }if(arr[i] < min){
            min = arr[i];
        }
         avg += arr[i];
    }
    avg = avg/arr.length
    arrnew.push(max);
    arrnew.push(min);
    arrnew.push(avg);
    return arrnew; 
}
11.Viết một hàm có chức năng hoán đổi phần tử đầu tiên và cuối cùng của mảng. Chiều dài tối thiểu mặc định của mảng là 2.
function swap(arr) {
    let temp = 0;
            temp = arr[0]
            arr[0] = arr[arr.length -1]
            arr[arr.length -1] = temp
    return arr; 
}
12.Viết một hàm có chức năng thay thế các phần tử có giá trị âm trong mảng với chuỗi 'Dojo'.
function numToStr(arr) {
    for(let i = 0 ; i < arr.length ; i++){
        if(arr[i] <0){
            arr[i] = "Dojo";
        }
    }
    return arr; 
}
